package com.example.Liverpool_TicketSystem.Controller.admin;

import java.util.List;


import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;

import com.example.Liverpool_TicketSystem.domain.Role;
import com.example.Liverpool_TicketSystem.domain.User;
import com.example.Liverpool_TicketSystem.domain.dto.CreateAccountDTO;
import com.example.Liverpool_TicketSystem.service.UserService;

import jakarta.validation.Valid;

@Controller
public class UserController {
    private final UserService userService;
    private final PasswordEncoder passwordEncoder;

    public UserController(UserService userService, PasswordEncoder passwordEncoder) {
        this.userService = userService;
        this.passwordEncoder = passwordEncoder;
    }

    // √ù t∆∞·ªüng v·ªÅ vi·ªác s·ª≠ d·ª•ng DTO ƒë·ªÉ validate t∆∞∆°ng t·ª± v·ªõi ·ªü client/HomePageController

    @GetMapping("/admin/accounts/create")
    public String getCreateAccountsPage(Model model) {
        // model.addAttribute("newUser", new User());

        model.addAttribute("newUser", new CreateAccountDTO());
        return "admin/accounts/create";
    }

    // @ModelAttribute("newUser") User user: Spring s·∫Ω l·∫•y d·ªØ li·ªáu t·ª´ form HTTP POST
    // v√† √°nh x·∫° n√≥ v√†o m·ªôt ƒë·ªëi t∆∞·ª£ng User m·ªõi

    @PostMapping("/admin/accounts/create")
    public String getCreateAccountsPage(@ModelAttribute("newUser") @Valid CreateAccountDTO createAccountDTO,
            BindingResult newUserBindingResult) {

        List<FieldError> errors = newUserBindingResult.getFieldErrors();
        if (newUserBindingResult.hasErrors()) {
            return "admin/accounts/create";
        }
        User user = new User();
        user.setUsername(createAccountDTO.getUsername());
        user.setEmail(createAccountDTO.getEmail());

        String hashPassword = this.passwordEncoder.encode(createAccountDTO.getPassword());
        user.setPassword(hashPassword);

        // ======================================================================
        // Hi·ªán t·∫°i do mu·ªën validate email t·ªìn t·∫°i n√™n t·∫°o th√™m c√°i CreateAccountDTO. Do
        // ƒë√≥ b·ªã v∆∞·ªõng c√°i ch·ªó role (ban ƒë·∫ßu t·∫°o 2 b·∫£ng Role v√† User) n√™n kh√¥ng l√†m code
        // n√†y n·ªØa)

        // 1. D·ªØ li·ªáu ƒë∆∞·ª£c g·ª≠i l√™n t·ª´ form

        // V·ªõi path="role.name", Spring s·∫Ω t·ª± ƒë·ªông:

        // T·∫°o m·ªôt User object m·ªõi (ho·∫∑c ƒë√£ c√≥ s·∫µn)
        // Trong User, s·∫Ω c√≥ m·ªôt thu·ªôc t√≠nh Role role
        // Spring s·∫Ω t·ª± t·∫°o ƒë·ªëi t∆∞·ª£ng Role, r·ªìi g√°n role.setName("ADMIN") ho·∫∑c "USER"
        // t√πy v√†o l·ª±a ch·ªçn c·ªßa ng∆∞·ªùi d√πng

        // üëâ K·∫øt qu·∫£ l√†:
        // Khi @ModelAttribute("newUser") User user ƒë∆∞·ª£c nh·∫≠n v√†o controller, th√¨:
        // user.getRole() kh√¥ng null
        // user.getRole().getName() = "ADMIN" (v√≠ d·ª•)

        // Tuy nhi√™n, ch·ªâ c√≥ m·ªói c√°i t√™n ("ADMIN"), ch·ª© kh√¥ng c√≥ ID ho·∫∑c c√°c th√¥ng tin
        // kh√°c c·ªßa Role trong database.

        // ===========

        // 2. T·∫°i sao ph·∫£i g·ªçi layRoleTheoTen()?
        // D√≤ng code:
        // user.setRole(this.userService.layRoleTheoTen(user.getRole().getName()));

        // c√≥ t√°c d·ª•ng:
        // ‚úÖ D√πng user.getRole().getName() l·∫•y ra t√™n t·ª´ form (v√≠ d·ª•: "ADMIN")
        // ‚úÖ G·ªçi t·ªõi userService.layRoleTheoTen(...) (ƒë√¢y l√† m·ªôt h√†m s·∫Ω truy v·∫•n CSDL ƒë·ªÉ
        // l·∫•y full object Role c√≥ name = "ADMIN")
        // ‚úÖ Sau ƒë√≥, b·∫°n d√πng user.setRole(...) ƒë·ªÉ g√°n l·∫°i Role n√†y cho User

        // ===========

        // üîÅ T√≥m t·∫Øt:
        // role.name trong form (JSP)
        // ‚Üí Ch·ªâ gi√∫p Spring l·∫•y c√°i t√™n c·ªßa role m√† ng∆∞·ªùi d√πng ch·ªçn (v√≠ d·ª•: "ADMIN"
        // ho·∫∑c "USER")

        // G·ªçi layRoleTheoTen(...) trong controller
        // ‚Üí D√πng c√°i name ƒë√≥ ƒë·ªÉ t√¨m ra ƒë·ªëi t∆∞·ª£ng Role ƒë·∫ßy ƒë·ªß trong CSDL, bao g·ªìm:
        // id
        // name
        // C√°c th√¥ng tin kh√°c (n·∫øu c√≥)

        // G√°n l·∫°i v√†o user.setRole(...)
        // ‚Üí ƒê·∫£m b·∫£o r·∫±ng user.role l√† m·ªôt Role ƒë√£ c√≥ s·∫µn trong database v√† Hibernate
        // hi·ªÉu ƒë√∫ng

        // user.setRole(this.userService.layRoleTheoTen(user.getRole().getName()));

        // ==========================================================================
        Role role = userService.layRoleTheoTen(createAccountDTO.getRoleName());
        user.setRole(role);

        this.userService.luuThongTinUser(user);

        // ‚úîÔ∏è T·∫°o, s·ª≠a, x√≥a th√†nh c√¥ng ‚Üí d√πng redirect:
        // ‚ùå Hi·ªÉn th·ªã form (GET) ‚Üí kh√¥ng c·∫ßn redirect
        return "redirect:/admin";

    }
    // ================================================================

}
